{"version":3,"file":"static/js/186.d6a7c86c.chunk.js","mappings":"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","sources":["../node_modules/@ionic/core/components/input-shims.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\nimport { w as win } from './index5.js';\n\nvar KeyboardResize;\n(function (KeyboardResize) {\n  KeyboardResize[\"Body\"] = \"body\";\n  KeyboardResize[\"Ionic\"] = \"ionic\";\n  KeyboardResize[\"Native\"] = \"native\";\n  KeyboardResize[\"None\"] = \"none\";\n})(KeyboardResize || (KeyboardResize = {}));\nconst Keyboard = {\n  getEngine() {\n    var _a;\n    return ((_a = win === null || win === void 0 ? void 0 : win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Keyboard')) && (win === null || win === void 0 ? void 0 : win.Capacitor.Plugins.Keyboard);\n  },\n  getResizeMode() {\n    const engine = this.getEngine();\n    if (!engine || !engine.getResizeMode) {\n      return Promise.resolve(undefined);\n    }\n    return engine.getResizeMode();\n  },\n};\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nconst SCROLL_AMOUNT_PADDING = 50;\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  }\n  else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\n};\n\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\n   * Scroll padding should only be added if:\n   * 1. The global scrollPadding config option\n   * is set to true.\n   * 2. The native keyboard resize mode is either \"none\"\n   * (keyboard overlays webview) or undefined (resize\n   * information unavailable)\n   * Resize info is available on Capacitor 4+\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\n   * When the input is about to receive\n   * focus, we need to move it to prevent\n   * mobile Safari from adjusting the viewport.\n   */\n  const focusIn = async () => {\n    /**\n     * Scroll assist should not run again\n     * on inputs that have been manually\n     * focused inside of the scroll assist\n     * implementation.\n     */\n    if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n      inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n      return;\n    }\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput);\n  };\n  componentEl.addEventListener('focusin', focusIn, true);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn, true);\n  };\n};\n/**\n * Use this function when you want to manually\n * focus an input but not have scroll assist run again.\n */\nconst setManualFocus = (el) => {\n  /**\n   * If element is already focused then\n   * a new focusin event will not be dispatched\n   * to remove the SKIL_SCROLL_ASSIST attribute.\n   */\n  if (document.activeElement === el) {\n    return;\n  }\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n  el.focus();\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    setManualFocus(inputEl);\n    /**\n     * Even though the input does not need\n     * scroll assist, we should preserve the\n     * the scroll padding as users could be moving\n     * focus from an input that needs scroll padding\n     * to an input that does not need scroll padding.\n     * If we remove the scroll padding now, users will\n     * see the page jump.\n     */\n    if (enableScrollPadding && contentEl !== null) {\n      setScrollPadding(contentEl, currentPadding);\n      setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n    }\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  setManualFocus(inputEl);\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  /**\n   * If enabled, we can add scroll padding to\n   * the bottom of the content so that scroll assist\n   * has enough room to scroll the input above\n   * the keyboard.\n   */\n  if (enableScrollPadding && contentEl) {\n    currentPadding = scrollData.scrollPadding;\n    setScrollPadding(contentEl, currentPadding);\n  }\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      setManualFocus(inputEl);\n      /**\n       * When the input is about to be blurred\n       * we should set a timeout to remove\n       * any scroll padding.\n       */\n      if (enableScrollPadding) {\n        setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n      }\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst startInputShims = async (config, platform) => {\n  const doc = document;\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  /**\n   * Grab the native keyboard resize configuration\n   * and pass it to scroll assist. Scroll assist requires\n   * that we adjust the input right before the input\n   * is about to be focused. If we called `Keyboard.getResizeMode`\n   * on focusin in scroll assist, we could potentially adjust the\n   * input too late since this call is async.\n   */\n  const keyboardResizeMode = await Keyboard.getResizeMode();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"names":["KeyboardResize","Keyboard","getEngine","_a","win","isPluginAvailable","getResizeMode","engine","this","Promise","resolve","undefined","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","arguments","length","disabledClonedInput","has","addClone","removeClone","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","concat","clone","get","delete","remove","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","input","getRootNode","activeElement","onBlur","hideCaret","showCaret","addEventListener","removeEventListener","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","doc","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","getScrollData","contentEl","keyboardHeight","itemEl","calcScrollData","getBoundingClientRect","defaultView","innerHeight","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","PADDING_TIMER_KEY","setScrollPadding","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setClearScrollPaddingListener","doneCallback","once","currentPadding","SKIP_SCROLL_ASSIST","enableScrollAssist","footerEl","enableScrollPadding","keyboardResize","disableClonedInput","addScrollPadding","mode","None","focusIn","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","hasAttribute","removeAttribute","abrupt","jsSetFocus","stop","apply","setManualFocus","el","setAttribute","focus","_ref2","_callee3","scrollData","scrollContentTimeout","scrollContent","doubleKeyboardEventListener","totalScrollAmount","_args3","_context3","raf","click","window","_ref3","_callee2","_context2","scrollByPoint","getScrollElement","sent","scrollHeight","clientHeight","scrollTop","type","_x","_x2","_x3","_x4","_x5","_x6","startInputShims","_ref4","_callee5","config","platform","isIOS","isAndroid","scrollAssist","inputBlurring","inputs","hideCaretMap","scrollAssistMap","keyboardResizeMode","registerInput","unregisterInput","_i","_inputs","_context5","getNumber","getBoolean","Array","from","querySelectorAll","_ref5","_callee4","inputRoot","rmFn","_rmFn","_context4","componentOnReady","shadowRoot","querySelector","findClosestIonContent","_x9","fn","detail","_x7","_x8"],"sourceRoot":""}